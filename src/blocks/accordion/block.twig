{# Define variables #}
{% set blockClasses = [
    'accordion',
    'accordion--' ~ fields.style|default('default'),
    block.className|default('')
]|join(' ')|trim %}

<div class="{{ blockClasses }}" id="{{ block.id }}">
    {% if fields.title %}
        <div class="accordion__header">
            <h2 class="accordion__title">{{ fields.title }}</h2>
            {% if fields.description %}
                <p class="accordion__description">{{ fields.description }}</p>
            {% endif %}
        </div>
    {% endif %}

    <div class="accordion__items" data-orientation="vertical">
        {% for item in fields.items %}
            <div class="accordion__item" data-state="closed">
                <button 
                    class="accordion__trigger" 
                    aria-expanded="false"
                    data-radix-collection-item
                >
                    {% if item.icon != 'none' %}
                        <span class="accordion__icon accordion__icon--{{ item.icon }}">
                            {% include '@block/accordion/components/icons/' ~ item.icon ~ '.twig' %}
                        </span>
                    {% endif %}
                    <span class="accordion__item-title">{{ item.title }}</span>
                    <span class="accordion__chevron">
                        {% include '@block/accordion/components/icons/chevron.twig' %}
                    </span>
                </button>
                <div class="accordion__content" role="region">
                    <div class="accordion__content-inner">
                        {{ item.content }}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>

<style>
.accordion {
    width: 100%;
    max-width: var(--container-width, 600px);
    margin: 2rem auto;
}

.accordion__header {
    text-align: center;
    margin-bottom: 2rem;
}

.accordion__title {
    font-size: 2rem;
    font-weight: 600;
    letter-spacing: -0.025em;
    margin-bottom: 0.5rem;
}

.accordion__description {
    color: var(--muted-foreground, #64748b);
    font-size: 1rem;
    line-height: 1.6;
}

.accordion__items {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.accordion__item {
    border-radius: 0.5rem;
    background: var(--card, white);
}

/* Style variants */
.accordion--default .accordion__item {
    border: 1px solid var(--border, #e2e8f0);
}

.accordion--bordered .accordion__item {
    border: 1px solid var(--border, #e2e8f0);
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
}

.accordion--minimal .accordion__item {
    border-bottom: 1px solid var(--border, #e2e8f0);
    border-radius: 0;
}

.accordion__trigger {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 1rem;
    text-align: left;
    background: transparent;
    border: none;
    cursor: pointer;
    gap: 0.75rem;
}

.accordion__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5rem;
    height: 1.5rem;
    flex-shrink: 0;
}

.accordion__icon svg {
    width: 1rem;
    height: 1rem;
}

.accordion__item-title {
    flex: 1;
    font-weight: 500;
}

.accordion__chevron {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 200ms;
}

.accordion__chevron svg {
    width: 1rem;
    height: 1rem;
}

[data-state="open"] .accordion__chevron {
    transform: rotate(180deg);
}

.accordion__content {
    overflow: hidden;
    height: 0;
    opacity: 0;
    transition: height 200ms ease, opacity 200ms ease;
}

[data-state="open"] .accordion__content {
    opacity: 1;
}

.accordion__content-inner {
    padding: 0 1rem 1rem;
    color: var(--muted-foreground, #64748b);
    line-height: 1.6;
}

/* Icon colors */
.accordion__icon--alert { color: var(--error, #ef4444); }
.accordion__icon--check { color: var(--success, #22c55e); }
.accordion__icon--info { color: var(--info, #3b82f6); }
.accordion__icon--question { color: var(--warning, #f59e0b); }
.accordion__icon--settings { color: var(--muted-foreground, #64748b); }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const accordions = document.querySelectorAll('.accordion__item');
    
    accordions.forEach(accordion => {
        const trigger = accordion.querySelector('.accordion__trigger');
        const content = accordion.querySelector('.accordion__content');
        
        trigger.addEventListener('click', () => {
            const isOpen = accordion.getAttribute('data-state') === 'open';
            
            // Close all other accordions
            accordions.forEach(other => {
                if (other !== accordion && other.getAttribute('data-state') === 'open') {
                    other.setAttribute('data-state', 'closed');
                    other.querySelector('.accordion__trigger').setAttribute('aria-expanded', 'false');
                    const otherContent = other.querySelector('.accordion__content');
                    otherContent.style.height = '0px';
                }
            });
            
            // Toggle current accordion
            accordion.setAttribute('data-state', isOpen ? 'closed' : 'open');
            trigger.setAttribute('aria-expanded', !isOpen);
            
            if (!isOpen) {
                content.style.height = content.scrollHeight + 'px';
            } else {
                content.style.height = '0px';
            }
        });
    });
});
</script>
